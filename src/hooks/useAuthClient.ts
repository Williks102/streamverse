// src/hooks/useAuthClient.ts - VERSION CORRIG√âE AVEC DEBUG
"use client";

import { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/database';
import type { User, Session } from '@supabase/supabase-js';
import { useRouter } from 'next/navigation';
import { useToast } from '@/hooks/use-toast';

interface UserProfile {
  id: string;
  name: string | null;
  role: 'user' | 'promoter' | 'admin';
  avatar_url: string | null;
  created_at: string;
  updated_at: string;
}

interface AuthState {
  user: User | null;
  profile: UserProfile | null;
  session: Session | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  isPromoter: boolean;
}

// Client Supabase c√¥t√© client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient<Database>(supabaseUrl, supabaseKey);

export function useAuthClient() {
  const [state, setState] = useState<AuthState>({
    user: null,
    profile: null,
    session: null,
    isLoading: true,
    isAuthenticated: false,
    isPromoter: false,
  });

  const router = useRouter();
  const { toast } = useToast();

  // ‚úÖ Fonction pour r√©cup√©rer le profil utilisateur
  const fetchProfile = async (userId: string): Promise<UserProfile | null> => {
    try {
      console.log('üì° [FETCH PROFILE] R√©cup√©ration profil pour:', userId);
      
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) {
        console.error('‚ùå [FETCH PROFILE] Erreur:', error);
        
        // Si le profil n'existe pas, essayer de le cr√©er
        if (error.code === 'PGRST116') {
          console.log('üîß [CREATE PROFILE] Profil inexistant, cr√©ation...');
          
          const { data: { user } } = await supabase.auth.getUser();
          if (user) {
            const newProfile = {
              id: user.id,
              name: user.email?.split('@')[0] || 'Utilisateur',
              role: 'promoter' as const,
              avatar_url: null,
            };

            const { data: createdProfile, error: createError } = await supabase
              .from('profiles')
              .insert(newProfile)
              .select()
              .single();

            if (createError) {
              console.error('‚ùå [CREATE PROFILE] Erreur cr√©ation:', createError);
              return null;
            }

            console.log('‚úÖ [CREATE PROFILE] Profil cr√©√©:', createdProfile);
            return createdProfile;
          }
        }
        return null;
      }

      console.log('‚úÖ [FETCH PROFILE] Profil r√©cup√©r√©:', profile);
      return profile;
    } catch (error) {
      console.error('‚ùå [FETCH PROFILE] Exception:', error);
      return null;
    }
  };

  // ‚úÖ Fonction de connexion
  const signIn = async (email: string, password: string) => {
    try {
      console.log('üîê [SIGN IN] Tentative connexion:', email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error('‚ùå [SIGN IN] Erreur:', error);
        return { error };
      }

      console.log('‚úÖ [SIGN IN] Connexion r√©ussie:', data.user?.email);
      return { data, error: null };
    } catch (error) {
      console.error('‚ùå [SIGN IN] Exception:', error);
      return { error: error as Error };
    }
  };

  // ‚úÖ Fonction de d√©connexion
  const signOut = async () => {
    try {
      console.log('üö™ [SIGN OUT] D√©connexion...');
      await supabase.auth.signOut();
    } catch (error) {
      console.error('‚ùå [SIGN OUT] Erreur:', error);
    }
  };

  // ‚úÖ R√©cup√©rer les informations utilisateur pour les Server Actions
  const getUserInfoForServerAction = () => {
    console.log('üìã [GET USER INFO] √âtat actuel:', {
      userExists: !!state.user,
      profileExists: !!state.profile,
      isAuthenticated: state.isAuthenticated,
      isPromoter: state.isPromoter,
      userId: state.user?.id,
      profileId: state.profile?.id,
      profileRole: state.profile?.role
    });

    if (!state.user) {
      console.error('‚ùå [GET USER INFO] Utilisateur non trouv√©');
      throw new Error('Utilisateur non authentifi√© - user manquant');
    }

    if (!state.profile) {
      console.error('‚ùå [GET USER INFO] Profil non trouv√©');
      throw new Error('Utilisateur non authentifi√© - profil manquant');
    }

    const userInfo = {
      id: state.user.id,
      email: state.user.email || '',
      profileId: state.profile.id,
      profileName: state.profile.name || '',
      profileRole: state.profile.role,
      avatarUrl: state.profile.avatar_url || undefined,
    };

    console.log('‚úÖ [GET USER INFO] Infos utilisateur pr√©par√©es:', userInfo);
    return userInfo;
  };

  // ‚úÖ Tester l'authentification
  const testAuth = async () => {
    try {
      console.log('üß™ [CLIENT AUTH TEST] D√©but du test...');
      
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      console.log('üß™ [CLIENT AUTH TEST] User:', user?.email, 'Error:', userError);

      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      console.log('üß™ [CLIENT AUTH TEST] Session:', !!session, 'Error:', sessionError);

      console.log('üß™ [CLIENT AUTH TEST] √âtat actuel:', {
        isAuthenticated: state.isAuthenticated,
        isPromoter: state.isPromoter,
        profileExists: !!state.profile,
        userExists: !!state.user
      });

      if (state.profile) {
        console.log('üß™ [CLIENT AUTH TEST] Profile:', {
          id: state.profile.id,
          role: state.profile.role,
          name: state.profile.name
        });
      }

      return {
        success: !!user && !!state.profile && state.isAuthenticated,
        user: user ? { id: user.id, email: user.email } : null,
        profile: state.profile,
        session: !!session,
        error: userError?.message || sessionError?.message || null
      };
    } catch (error) {
      console.error('üß™ [CLIENT AUTH TEST ERROR]:', error);
      return {
        success: false,
        user: null,
        profile: null,
        session: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  };

  // ‚úÖ Initialisation et √©coute des changements d'authentification
  useEffect(() => {
    let mounted = true;

    const initAuth = async () => {
      try {
        console.log('üöÄ [INIT AUTH] Initialisation...');
        
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('‚ùå [INIT AUTH] Erreur r√©cup√©ration session:', error);
          if (mounted) {
            setState(prev => ({ ...prev, isLoading: false }));
          }
          return;
        }

        if (session?.user && mounted) {
          console.log('üë§ [INIT AUTH] Session trouv√©e pour:', session.user.email);
          
          const profile = await fetchProfile(session.user.id);
          
          if (profile) {
            setState({
              user: session.user,
              profile: profile,
              session: session,
              isLoading: false,
              isAuthenticated: true,
              isPromoter: profile.role === 'promoter',
            });
            console.log('‚úÖ [INIT AUTH] √âtat mis √† jour:', {
              userId: session.user.id,
              profileRole: profile.role,
              isPromoter: profile.role === 'promoter'
            });
          } else {
            console.log('‚ùå [INIT AUTH] Impossible de r√©cup√©rer/cr√©er le profil');
            setState(prev => ({ ...prev, isLoading: false }));
          }
        } else if (mounted) {
          console.log('üö´ [INIT AUTH] Aucune session trouv√©e');
          setState(prev => ({ ...prev, isLoading: false }));
        }
      } catch (error) {
        console.error('‚ùå [INIT AUTH] Exception:', error);
        if (mounted) {
          setState(prev => ({ ...prev, isLoading: false }));
        }
      }
    };

    initAuth();

    // √âcouter les changements d'authentification
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('üîÑ [AUTH STATE CHANGE] √âv√©nement:', event);

        if (!mounted) return;

        if (event === 'SIGNED_IN' && session?.user) {
          console.log('üì• [AUTH STATE CHANGE] Connexion d√©tect√©e:', session.user.email);
          
          const profile = await fetchProfile(session.user.id);
          
          if (profile) {
            setState({
              user: session.user,
              profile: profile,
              session: session,
              isLoading: false,
              isAuthenticated: true,
              isPromoter: profile.role === 'promoter',
            });
            
            toast({
              title: "Connexion r√©ussie",
              description: `Bienvenue ${session.user.email}`
            });
          }
        } else if (event === 'SIGNED_OUT') {
          console.log('üì§ [AUTH STATE CHANGE] D√©connexion d√©tect√©e');
          setState({
            user: null,
            profile: null,
            session: null,
            isLoading: false,
            isAuthenticated: false,
            isPromoter: false,
          });
        } else if (event === 'TOKEN_REFRESHED' && session) {
          console.log('üîÑ [AUTH STATE CHANGE] Token rafra√Æchi');
          setState(prev => ({
            ...prev,
            user: session.user,
            session: session
          }));
        }
      }
    );

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, [toast]);

  return {
    ...state,
    signIn,
    signOut,
    testAuth,
    getUserInfoForServerAction,
    supabase,
  };
}